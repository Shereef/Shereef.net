/**
 * -----------------------------------------------------
 * NOTES ON CONFIGURATION STRUCTURE
 * -----------------------------------------------------
 *
 * Out of the box, ESLint does not support TypeScript or HTML. Naturally those are the two
 * main file types we care about in Angular projects, so we have to do a little extra work
 * to configure ESLint exactly how we need to.
 *
 * Fortunately, ESLint gives us an "overrides" configuration option which allows us to set
 * different lint tooling (parser, plugins, rules etc) for different file types, which is
 * critical because our .ts files require a different parser and different rules to our
 * .html (and our inline Component) templates.
 */
{
	"root": true,
	"overrides": [
		/**
		 * -----------------------------------------------------
		 * TYPESCRIPT FILES (COMPONENTS, SERVICES ETC) (.ts)
		 * -----------------------------------------------------
		 */
		{
			"files": ["*.ts", "*.js"],
			"parserOptions": {
				"project": ["tsconfig.*?.json", "e2e/tsconfig.json"],
				"createDefaultProgram": true,
				"ecmaVersion": 2017
			},
			"env": {
				"es6": true
			},
			"plugins": ["unused-imports"],
			"extends": ["plugin:@angular-eslint/recommended", "prettier"],
			"rules": {
				/**
				 * Any TypeScript related rules you wish to use/reconfigure over and above the
				 * recommended set provided by the @angular-eslint project would go here.
				 *
				 * There are some examples below from the @angular-eslint plugin and ESLint core:
				 */
				"@angular-eslint/directive-selector": [
					"error",
					{
						"type": "attribute",
						"style": "camelCase"
					}
				],
				"@angular-eslint/component-selector": [
					"error",
					{
						"type": "element",
						"style": "kebab-case"
					}
				],
				"@typescript-eslint/naming-convention": [
					"error",
					{
						"selector": "class",
						"format": ["PascalCase"]
					}
				],
				"curly": ["error", "all"],
				"no-multiple-empty-lines": [
					"error",
					{
						"max": 1,
						"maxEOF": 1,
						"maxBOF": 0
					}
				],
				"no-caller": "error",
				"no-bitwise": "error",
				"no-debugger": "error",
				"no-eval": "error",
				"no-shadow": "off",
				"@typescript-eslint/no-shadow": "error",
				"no-shadow-restricted-names": "error",
				"no-throw-literal": "error",
				"no-fallthrough": "error",
				"no-trailing-spaces": "error",
				"no-unused-expressions": "error",
				"no-var": "error",
				"prefer-const": "error",
				"semi": ["error", "always"],
				"eqeqeq": "error",
				"@typescript-eslint/no-unused-vars": "off",
				"unused-imports/no-unused-imports-ts": "error",
				"unused-imports/no-unused-vars-ts": [
					"error",
					{ "vars": "all", "varsIgnorePattern": "^_", "args": "none" }
				]
			}
		},
		/**
		 * -----------------------------------------------------
		 * COMPONENT TEMPLATES
		 * -----------------------------------------------------
		 *
		 * If you use inline templates, make sure you read the notes on the configuration
		 * object after this one to understand how they relate to this configuration directly
		 * below.
		 */
		{
			"files": ["*.component.html"],
			"extends": ["plugin:@angular-eslint/template/recommended"],
			"rules": {
				/**
				 * Any template/HTML related rules you wish to use/reconfigure over and above the
				 * recommended set provided by the @angular-eslint project would go here.
				 *
				 * There is an example below from ESLint core (note, this specific example is not
				 * necessarily recommended for all projects):
				 */
				"max-len": [
					"error",
					{
						"code": 140
					}
				]
			}
		},
		/**
		 * -----------------------------------------------------
		 * EXTRACT INLINE TEMPLATES (from within .component.ts)
		 * -----------------------------------------------------
		 *
		 * This extra piece of configuration is necessary to extract inline
		 * templates from within Component metadata, e.g.:
		 *
		 * @Component({
		 *  template: `<h1>Hello, World!</h1>`
		 * })
		 * ...
		 *
		 * It works by extracting the template part of the file and treating it as
		 * if it were a full .html file, and it will therefore match the configuration
		 * specific for *.component.html above when it comes to actual rules etc.
		 *
		 * NOTE: This processor will skip a lot of work when it runs if you don't use
		 * inline templates in your projects currently, so there is no great benefit
		 * in removing it, but you can if you want to.
		 *
		 * You won't specify any rules here. As noted above, the rules that are relevant
		 * to inline templates are the same as the ones defined for *.component.html.
		 */
		{
			"files": ["*.component.ts"],
			"extends": [
				"plugin:@angular-eslint/template/process-inline-templates"
			]
		}
	]
}
